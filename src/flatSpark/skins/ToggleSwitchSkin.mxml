<?xml version="1.0" encoding="utf-8"?>

<!--

Licensed to the Apache Software Foundation (ASF) under one or more
contributor license agreements.  See the NOTICE file distributed with
this work for additional information regarding copyright ownership.
The ASF licenses this file to You under the Apache License, Version 2.0
(the "License"); you may not use this file except in compliance with
the License.  You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

-->

<!--- The default skin class for the Spark CheckBox component.

@see spark.components.CheckBox

@langversion 3.0
@playerversion Flash 10
@playerversion AIR 1.5
@productversion Flex 4
-->
<s:SparkSkin xmlns:fb="http://ns.adobe.com/flashbuilder/2009"
			 xmlns:fx="http://ns.adobe.com/mxml/2009"
			 xmlns:mx="library://ns.adobe.com/flex/mx"
			 xmlns:s="library://ns.adobe.com/flex/spark"
			 creationComplete="creationCompleteHandler(event)"
			 alpha.disabledStates="0.5">
	
	<fx:Metadata>
		<![CDATA[ 
		/** 
		* @copy spark.skins.spark.ApplicationSkin#hostComponent
		*/
		[HostComponent("spark.components.supportClasses.ToggleButtonBase")]
		]]>
	</fx:Metadata>
	
		<fx:Script fb:purpose="styling">
		/* Define the skin elements that should not be colorized.
		For button, the graphics are colorized but the label is not. */
		private static const exclusions:Array = ["labelDisplay"];
		
		/**
		 * @private
		 */
		override public function get colorizeExclusions():Array
		{
			return exclusions;
		}
		
		/**
		 * @private
		 */
		override protected function initializationComplete():void
		{
			useChromeColor = true;
			super.initializationComplete();
		}
	</fx:Script>
	
	<fx:Script>
		<![CDATA[
			import mx.binding.utils.ChangeWatcher;
			import mx.events.FlexEvent;
			
			import spark.components.supportClasses.ToggleButtonBase;
			import spark.effects.easing.EaseInOutBase;
			
			import flatSpark.utils.ColorUtils;
			/**
			 * @private
			 */
			private static const focusExclusions:Array = ["labelDisplay"];
			
			/**
			 * @private
			 */
			override public function get focusSkinExclusions():Array
			{
				return focusExclusions;
			}
			
			[Bindable]private var cornerRadius:Number = 10;
			[Bindable]private var labelPadding:Number = 8;
			
			private var contentPosition:Number;
			private var mouseDownX:Number;
			
			[Inspectable]
			public var fontFamily2:String = "Lato";
			
			protected function creationCompleteHandler(event:FlexEvent):void
			{
				Sprite(hostComponent).mouseChildren = true;
				ChangeWatcher.watch(hostComponent, "selected", selectedChangeHandler);
				var biggestLabel:Number = Math.max(selectedGroup.width, deselectedGroup.width);
				
				switchButton.minWidth = biggestLabel + thumb.width / 2;
				switchButton.width = Math.max(width, biggestLabel + thumb.width / 2);
				maskRect.width = switchButton.width;
				selectedGroup.width = deselectedGroup.width = deselectedGroup.x = switchButton.width - thumb.width / 2;
				switchButton.width = switchButton.width;
				contentGroup.x = hostComponent.selected ? 0 : -(selectedGroup.width - thumb.width / 2);
				cornerRadius = contentGroup.height / 2;				
			}
			
			private function selectedChangeHandler(event:Event):void
			{
				animate();
			}
			
			private function animate():void
			{
				moveEffect.stop();
				moveEffect.xTo = hostComponent.selected ? 0 : -(selectedGroup.width - thumb.width / 2);
				slideEffect.play();
			}
			
			protected function thumb_mouseDownHandler(event:MouseEvent):void
			{
				stage.addEventListener(MouseEvent.MOUSE_MOVE, stageMouseMoveHandler);
				stage.addEventListener(MouseEvent.MOUSE_UP, stageMouseUpHandler);
				contentPosition = contentGroup.x;
				mouseDownX = mouseX;
			}
			
			protected function stageMouseMoveHandler(event:MouseEvent):void
			{
				contentGroup.x = Math.max(-(selectedGroup.width - thumb.width / 2), Math.min(0, contentPosition + (mouseX - mouseDownX)));
			}
			
			protected function stageMouseUpHandler(event:MouseEvent):void
			{
				stage.removeEventListener(MouseEvent.MOUSE_MOVE, stageMouseMoveHandler);
				stage.removeEventListener(MouseEvent.MOUSE_UP, stageMouseUpHandler);
				if(Math.abs(mouseDownX - mouseX) > 2)
				{
					var selected:Boolean
					if(contentGroup.x > -(selectedGroup.width - thumb.width / 2) / 2)
						selected = false;
					else
						selected = true;
					if(ToggleButtonBase(hostComponent).selected != selected)
						ToggleButtonBase(hostComponent).selected = selected;
					else
						animate();
				}
				ToggleButtonBase(hostComponent).selected = !ToggleButtonBase(hostComponent).selected;
				ToggleButtonBase(hostComponent).dispatchEvent(new Event(Event.CHANGE));
			}
		]]>
	</fx:Script>
	<fx:Declarations>
		<s:Parallel id="slideEffect">
			<s:Move id="moveEffect"
					target="{contentGroup}"
					duration="150"
					easer="{new EaseInOutBase(0.5)}" />
		</s:Parallel>		
	</fx:Declarations>
	<s:states>
		<s:State name="up" />
		<s:State name="over" stateGroups="overStates" />
		<s:State name="down" stateGroups="downStates" />
		<s:State name="disabled" stateGroups="disabledStates" />
		<s:State name="upAndSelected" stateGroups="selectedStates" />
		<s:State name="overAndSelected" stateGroups="overStates, selectedStates" />
		<s:State name="downAndSelected" stateGroups="downStates, selectedStates" />
		<s:State name="disabledAndSelected" stateGroups="disabledStates, selectedStates" />
	</s:states>
	
	<s:layout>
		<s:HorizontalLayout verticalAlign="middle" gap="10" />
	</s:layout>
	
	<s:Group id="switchButton" width="100%" mouseDown="thumb_mouseDownHandler(event)" mouseEnabledWhereTransparent="false">
		<s:Group id="maskRect" width="100%" height="{contentGroup.height}">
			<s:Rect top="0" bottom="0" left="0" right="0"
					radiusX="{cornerRadius}"
					radiusY="{cornerRadius}">
				<s:fill>
					<s:SolidColor alpha="0.5" />
				</s:fill>
			</s:Rect>
		</s:Group>
		
		<s:Group id="contentGroup" mask="{maskRect}">
			<s:Group height="30">				
				<s:Group id="selectedGroup" height="100%" >
					<s:Rect top="0" bottom="0" left="0" right="0"
							topLeftRadiusX="{cornerRadius}"
							topLeftRadiusY="{cornerRadius}"
							bottomLeftRadiusX="{cornerRadius}"
							bottomLeftRadiusY="{cornerRadius}">
						<s:fill>
							<s:SolidColor color="{ColorUtils.WetAsphalt}"/>
						</s:fill>
					</s:Rect>
					<s:Label id="selectedLabelField"
							 top="8"
							 bottom="8"
							 left="{labelPadding+2}"
							 right="{labelPadding+thumb.width/2}"
							 color="{ColorUtils.Turquoise}"
							 textAlign="center"
							 horizontalCenter="0"
							 verticalAlign="middle"
							 verticalCenter="0"
							 baselineShift="-1" 
							 fontFamily="Lato"
							 fontSize="15"/>
				</s:Group>
				
				<s:Group id="deselectedGroup" height="100%">
					<s:Rect top="0" bottom="0" left="0" right="0"
							topRightRadiusX="{cornerRadius}"
							topRightRadiusY="{cornerRadius}"
							bottomRightRadiusX="{cornerRadius}"
							bottomRightRadiusY="{cornerRadius}">
						<s:fill>
							<s:SolidColor color="{ColorUtils.Silver}"/>
						</s:fill>
					</s:Rect>
					<s:Label id="deselectedLabelField" 
							 top="8"
							 bottom="8"
							 left="{labelPadding+thumb.width/2}"
							 right="{labelPadding+2}"
							 color="0xFFFFFF"
							 textAlign="center"
							 horizontalCenter="0"
							 verticalAlign="middle"
							 verticalCenter="0"
							 baselineShift="-1" 
							 fontFamily="Lato"
							 fontSize="15"/>
				</s:Group>
			</s:Group>
			<s:Group id="thumb"
					 x="{selectedGroup.width-thumb.width/2}"
					 width="30" height="100%">
				
				<!-- over fill -->
				<s:Rect width="100%" excludeFrom="selectedStates"
						top="4" bottom="4" left="4" right="4"
						radiusX="{cornerRadius}"
						radiusY="{cornerRadius}">
					<s:fill>
						<s:SolidColor color="{ColorUtils.Asbestos}" />
					</s:fill>
				</s:Rect>
				
				<s:Rect width="100%" includeIn="selectedStates"
						top="4" bottom="4" left="4" right="4"
						radiusX="{cornerRadius}"
						radiusY="{cornerRadius}">
					<s:fill>
						<s:SolidColor color="{ColorUtils.Turquoise}" />
					</s:fill>
				</s:Rect>
				
				<!-- over border -->
				<s:Rect width="100%" excludeFrom="selectedStates"
						top="0" bottom="0" left="0" right="0"
						radiusX="{cornerRadius}"
						radiusY="{cornerRadius}">
					<s:stroke>
						<s:SolidColorStroke color="{ColorUtils.Silver}" weight="4" />
					</s:stroke>
				</s:Rect>
				
				<s:Rect width="100%" includeIn="selectedStates"
						top="0" bottom="0" left="0" right="0"
						radiusX="{cornerRadius}"
						radiusY="{cornerRadius}">
					<s:stroke>
						<s:SolidColorStroke color="{ColorUtils.WetAsphalt}" weight="4" />
					</s:stroke>
				</s:Rect>
			</s:Group>
		</s:Group>
	</s:Group>
	
	<!-- Label -->
	<!--- @copy spark.components.supportClasses.ButtonBase#labelDisplay -->
	<s:Label id="labelDisplay" maxDisplayedLines="1" fontFamily="Lato" fontSize="15"/>
	
</s:SparkSkin>